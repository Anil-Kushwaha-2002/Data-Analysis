# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14NSKSMC01NUfhkjrU7x_dhHahjdWaEFS

**SDE Assignment - Feb 2025**

**Name -** Anil kuskwaha

**Enail -** kumaranil48309@gmail.com
"""

from google.colab import files

print("Please upload PDF files :")  # server_log
uploaded = files.upload()
log_file_name = list(uploaded.keys())[0]

"""# **Question 1**

**Write a program which reads this log file and produces two histograms.**
"""

import re
from collections import defaultdict
from datetime import datetime

# Regular expression to extract IP and timestamp
LOG_PATTERN = r'(?P<ip>\d+\.\d+\.\d+\.\d+) - - \[(?P<timestamp>[^\]]+)\]'

def parse_log(file_path):
    ip_counts = defaultdict(int)    # Store IP occurrences
    hourly_counts = defaultdict(int)  # Store visitors per hour

    with open(file_path, 'r') as file:
        for line in file:
            match = re.search(LOG_PATTERN, line)
            if match:
                ip = match.group("ip")
                timestamp = match.group("timestamp")

                # Convert timestamp to datetime object
                log_time = datetime.strptime(timestamp, "%d/%b/%Y:%H:%M:%S %z")
                hour = log_time.strftime("%H")  # Extract hour (HH)

                # Update counts
                ip_counts[ip] += 1
                hourly_counts[hour] += 1

    return ip_counts, hourly_counts

# Call the function with uploaded file
ip_counts, hourly_counts = parse_log(log_file_name)

"""**1. To show distinct IP addresses that hit the server on a given day.**"""

def generate_ip_histogram(ip_counts):
    print("\nIP Address        | Occurrences")
    print("---------------------------------")
    for ip, count in sorted(ip_counts.items(), key=lambda x: x[1], reverse=True):
        print(f"{ip:17} | {count}")

generate_ip_histogram(ip_counts)

"""**2. To show the hourly traffic on a given day.**"""

def generate_hourly_histogram(hourly_counts):
    print("\nHour  | Visitors")
    print("--------------------")
    for hour, count in sorted(hourly_counts.items()):
        print(f"{hour:5} | {count}")

generate_hourly_histogram(hourly_counts)

"""# **Question 2**

**1. List the IP addresses that contribute to 85% of the traffic on a given day.**
"""

def find_top_ips(ip_counts):
    total_requests = sum(ip_counts.values())  # Total requests
    sorted_ips = sorted(ip_counts.items(), key=lambda x: x[1], reverse=True)  # Sort by occurrences

    top_ips = []
    cumulative = 0

    for ip, count in sorted_ips:
        cumulative += count
        top_ips.append(ip)
        if cumulative / total_requests >= 0.85:  # Stop when reaching 85%
            break

    print("\nTop IPs contributing to 85% of traffic:")
    print("\n".join(top_ips))

# Call function
find_top_ips(ip_counts)

"""**2. List the hours contributing to the 70% of overall traffic on a given day.**"""

def find_top_hours(hourly_counts):
    total_hourly = sum(hourly_counts.values())  # Total hourly traffic
    sorted_hours = sorted(hourly_counts.items(), key=lambda x: x[1], reverse=True)  # Sort by visitors

    top_hours = []
    cumulative = 0

    for hour, count in sorted_hours:
        cumulative += count
        top_hours.append(hour)
        if cumulative / total_hourly >= 0.70:  # Stop when reaching 70%
            break

    print("\nTop Hours contributing to 70% of traffic:")
    print(", ".join(top_hours))

# Call function
find_top_hours(hourly_counts)

"""# **Question 3**

**Extra Credit. Create a dashboard to show the data in a browser.**
"""

import matplotlib.pyplot as plt

# Function to plot histogram
def plot_histogram(data, title, xlabel, ylabel):
    plt.figure(figsize=(10, 5))
    plt.bar(data.keys(), data.values(), color='blue')
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.title(title)
    plt.xticks(rotation=45)  # Rotate labels for readability
    plt.show()

# Plot IP Histogram
plot_histogram(ip_counts, "IP Address Histogram", "IP Address", "Hits")

# Plot Hourly Traffic Histogram
plot_histogram(hourly_counts, "Hourly Traffic", "Hour", "Requests")